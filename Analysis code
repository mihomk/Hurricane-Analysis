# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]


# Update the damages list to a new list by converting the dollar amounts to float values
conversion = {"M": 1000000,
              "B": 1000000000}
def update_damages(damages):
  new_list = []
  for damage in damages:
    if damage == "Damages not recorded":
      new_list.append(damage)
    else:
      if damage[-1] == "M":
        new_list.append(float(damage.strip("M")) * conversion["M"])
      else:
        new_list.append(float(damage.strip("B")) * conversion["B"])
  return new_list

updated_damages = update_damages(damages)


# Create a combined hurricanes dictionary consisting of all the information from each individual list
def create_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
  hurricanes = {}
  index = 0
  for name in names:
    hurricanes[name] = {
      'Name': names[index],
      'Month': months[index],
      'Year': years[index],
      'Max Sustained Wind': max_sustained_winds[index],
      'Areas Affected': areas_affected[index],
      'Damage': damages[index],
      'Death': deaths[index]
    }
    index += 1
  return hurricanes

hurricanes = create_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)
#print(hurricanes)


# Organize the hurricanes dictionary into a new list sorted by year of occurance
def create_dictionary_year(hurricanes):
  hurricanes_by_year = {}
  for cane in hurricanes:
    current_year = hurricanes[cane]['Year']
    current_cane = hurricanes[cane]
    if current_year not in hurricanes_by_year:
      hurricanes_by_year[current_year] = [current_cane]
    else:
      hurricanes_by_year[current_year].append(current_cane)
  return hurricanes_by_year
  
hurricanes_by_year = create_dictionary_year(hurricanes)
#print(hurricanes_by_year)


# Create a dictionary of areas to count how often each area is listed as an affected area of a hurricane
def create_disctionary_affected_area(hurricanes):
  affected_area = {}
  for cane in hurricanes:
    for area in hurricanes[cane]['Areas Affected']:
      if area not in affected_area:
        affected_area[area] = 1
      else:
        affected_area[area] += 1
  return affected_area
  
affected_area = create_disctionary_affected_area(hurricanes)
#print(affected_area)


# Find the area affected by the most hurricanes and how often it was hit
def calculate_maximum_hit(affected_area):
  max_area = 'Central America'
  max_area_count = 9
  for area in affected_area:
    if affected_area[area] > max_area_count:
      max_area = area
      max_area_count = affected_area[area]
  return max_area, max_area_count
  
most_affected_area = calculate_maximum_hit(affected_area)
#print(most_affected_area)


# Calculating the deadliest hurricane that caused the greatest number of deaths and how many deaths it caused
def calculate_max_mortality(hurricanes):
  max_hurricane = 'Cuba I'
  max_mortality = 90
  for cane in hurricanes:
    if hurricanes[cane]['Death'] > max_mortality:
      max_hurricane = cane
      max_mortality = hurricanes[cane]['Death']
  return max_hurricane, max_mortality

max_mortality = calculate_max_mortality(hurricanes)
#print(max_mortality)


# Rating Hurricanes by Mortality where Level 1 means resulting deaths greater than 0 and less than or equal to 100
def create_mortality_rating(hurricanes):
  mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
  hurricanes_by_mortality = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for cane in hurricanes:
    if hurricanes[cane]['Death'] == mortality_scale[0]:
      hurricanes_by_mortality[0].append(cane)
    elif mortality_scale[0] < hurricanes[cane]['Death'] <= mortality_scale[1]:
      hurricanes_by_mortality[1].append(cane)
    elif mortality_scale[1] < hurricanes[cane]['Death'] <= mortality_scale[2]:
      hurricanes_by_mortality[2].append(cane)
    elif mortality_scale[2] < hurricanes[cane]['Death'] <= mortality_scale[3]:
      hurricanes_by_mortality[3].append(cane)
    elif mortality_scale[3] < hurricanes[cane]['Death'] <= mortality_scale[4]:
      hurricanes_by_mortality[4].append(cane)
    else: 
      hurricanes_by_mortality[5].append(cane)
  return hurricanes_by_mortality

hurricane_mortality = create_mortality_rating(hurricanes)
#print(hurricane_mortality)


# Find the hurricane that caused the greatest damage, and how costly it was
def calculate_hurricane_damage(hurricanes):
  max_hurricane = 'Cuba I'
  max_damage = 100000000
  for cane in hurricanes:
    if hurricanes[cane]['Damage'] == 'Damages not recorded':
      pass
    elif hurricanes[cane]['Damage'] > max_damage:
      max_hurricane = cane
      max_damage = hurricanes[cane]['Damage']
  return max_hurricane, max_damage

hurricane_max_damage = calculate_hurricane_damage(hurricanes)
#print(hurricane_max_damage)


# Categorize hurricanes in a new dictionary with damage severity as key
def create_damage_rating(hurricanes):
  damage_scale = {0: 0,
                  1: 100000000,
                  2: 1000000000,
                  3: 10000000000,
                  4: 50000000000}
  hurricanes_by_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for cane in hurricanes:
    if (hurricanes[cane]['Damage'] == damage_scale[0]) or (hurricanes[cane]['Damage'] == 'Damages not recorded'):
      hurricanes_by_damage[0].append(cane)
    elif damage_scale[0] < hurricanes[cane]['Damage'] <= damage_scale[1]:
      hurricanes_by_damage[1].append(cane)
    elif damage_scale[1] < hurricanes[cane]['Damage'] <= damage_scale[2]:
      hurricanes_by_damage[2].append(cane)
    elif damage_scale[2] < hurricanes[cane]['Damage'] <= damage_scale[3]:
      hurricanes_by_damage[3].append(cane)
    elif damage_scale[3] < hurricanes[cane]['Damage'] <= damage_scale[4]:
      hurricanes_by_damage[4].append(cane)
    else: 
      hurricanes_by_damage[5].append(cane)
  return hurricanes_by_damage
  
damage_scale = create_damage_rating(hurricanes)
print(damage_scale)
